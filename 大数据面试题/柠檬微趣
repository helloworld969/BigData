学长一：
  1.scala语言的特质,闭包,模式匹配，变量，抽象
        特质：类似于Java中的接口，用trait关键字声明，可以在创建类时使用，也可以在创建类对象时动态混入，可以叠加使用，用with关键字
        闭包：简单的来说就是在一个方法内使用了不属于这个方法的对象或变量
        抽象：一个不完整的就是个抽象的，不完整的类就是抽象类（），不完整的方法就是抽象方法（只声明没实现），不完整是属性就是抽象属性（只声明没有初始化）
  2.spark的rdd的特点
        首选位置
        分区器
        分区列表
        血缘依赖
        分区计算函数
  3.精准一次性消费如何实现，如何手动维护
        手动提交偏移量+幂等性处理
        以Kafka来说，首先偏移量需要手动维护，如果采用自动提交，他的提交方式是数据拉取走后就提交偏移量，
    不管有没有计算，如果提交后计算挂掉，再启动时从新的偏移量读取数据，则可能造成数据丢失，所以采用手动提交，
    同时数据保存要做成幂等性保存，一般有主键的数据库都支持幂等性upsert。
  5.为什么选用direct，以及他的并行度是怎么回事
        方式分为receiver和direct，由于receiver模式需要一个单独Executor去接收数据，然后发送给其他Executor，
    存在问题，发送方和接收方速度可能不同，特别是接收的Executor速度大于计算Executor速度，会导致节点内存溢出。
    direct方式由计算Executor直接消费Kafka数据，速度由自身控制。所以选用direct方式。
    direct方式的并行度就是他分区数，实际中他的并行度是vcore的数量
    
  4.场景题，如何在大量数据中快速抓取某类数据
  
  5.算法加数据结构加链表，没整理，听不懂也答不上来
